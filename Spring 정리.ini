Spring 정리

Spring Framework 
- Java 웹 개발용 프레임워크 (동적 웹 개발에 사용)

Spring 특징 
- IOC (Inversion Of Control, 제어의 역전) 
    -> 객체 생성, 관리를 Spring 프레임워크가 주도
    -> Bean : Spring이 관리하는 객체

- DI (Dependency Injection, 의존성 주입)
    -> Spring이 관리하는 객체(Bean)를 필요한 위치에 주입
    -> @AutoWired : 해당 필드, Setter, 생성자에 
                    같은 타입 또는 상속 관계인 Bean을 자동으로 주입 
    -> @RequiredArgsConstructor 
        -> lombok 제공 어노테이션 
        -> 생성자를 이용해서 의존성 주입하는 코드를 자동 완성
        -> 조건 : final필드를 작성해야 함
                    (final 필드에 대한 의존성 주입 코드 생성)
    


Spring 요청/응답 흐름
- 요청(Request) -> Dispatcher Servlet -> Controller(+HandlerMapping) -> Service -> Mapper -> DB 
                                        <- Servlet <- Controller <- Service <- Mapper <- (결과) 
                                        [Controller -> Dispatcher Servlet 응답 방법 ]
                                        1) froword(요청 위임)인 경우
                                            Dispatcher Servlet -> View Resolver 
                                            -> html로 응답화면 만들기(ThymeLeaf) -> 클라이언트 응답
                                        2) redirect(재요청)인 경우 
                                            Dispatcher Servlet -> 다른 Controller 메서드 요청
                                        3) 비동기 요청(ajax)인 경우 (특정 데이터만 요구)
                                            @ResponseBody가 붙은 Controller 메서드 반환
                                            -> Dispatcher Servlet -> 클라이언트 응답 본문(JS fetch())반환


Spring Boot에서 사용되는 Annotation(어노테이션)
- @Component : Bean으로 등록하라는 어노테이션의 부모 어노테이션
- @Controller : 요청/응답 제어(컨드롤러) 역할 명시 + Bean등록
- @Service : 비즈니스 로직(가공, 트랜잭션 처리) 역할 명시 + Bean등록
- @Repository : 저장소(DB, File) 연결 여갈 명시 + Bean등록

- @Mapper : MyBatis 제공 어노테이션
            MyBatis의 인터페이스를 마킹하여 해당 인터페이스를 기반으로
            SQL mapper를 생성하도록 지시
- @Bean : 개발자가 생성함 객체를 Spring이 개발하게 하는 것
- @Configuration : 서버 시작 시 내부에 작성된 모든 메서드를 실행
                    보통 설정 내용을 작성해서 서버 시작 시 모두 적용하게 함
- @Autowire : 등록된 Bean 중 같은 타입 또는 상속 관계 Bean을
                필드,setter 매개변수 , 생성자 매개변수로
                의존성 주입(DI)
-@RequiredArgsConstructor : 생성자 방식 @Autowire 코드 자동 완성(Lombok)
-@Getter : getter 코드 자동 완성(Lombok)
-@Setter : setter 코드 자동 완성(Lombok)
-@NoArgsConstructor : 기본 생성자 자동 완성(Lombok)
-@AllArgsConstructor : 모든 필드 초기화 생성자 자동 완성(Lombok)
-@ToString : toString() 오버라이딩 자동 완성(Lombok)
-@Slf4j : log출력 객체 생성 구문 자동 완성(Lombok)

@RequestMapping(url) : 요청을 클래스 또는 메서드에 매핑
                        (GET/POST/PUT/DELETE 가리지 않음)
                        -클래스 레벨 : 앞 부분 공통 주소
                        - 메서드 레벨 : 실행할 메서드와 매핑
                        (클래스 레벨 + 메서드 레벨)
@GETMapping(url) : method ="GET" 요청 매핑 처리
@POSTMapping(url) : method ="POST" 요청 매핑 처리
@PUTMapping(url) : method ="PUT" 요청 매핑 처리
@DELETEMapping(url) : method ="DELETE" 요청 매핑 처리

==> 나누는 이유 : 하나의 주소(url)를 이용해서 요청 방식에 따라 CRUD를 모두 수행하기 위해서 
                    POST : 삽입(INSERT) == CREATE
                    GET : 조회 (SELECT) ==READ
                    PUT : 수정 (UPDATE) ==UPDATE
                    DELETE : 삭제 (DELETE) ==DELETE

                    (RESTful API)



@PathVariable("key") : @Request/Get/Post/Put/DeleteMapping()에 작성된
                        URL에서 큭정 경로를 얻어와 변수에 저장하는 어노테이션

                        ex) 요청 주소 :/test/영주/하와이
                        
                            @GETMapping("test/{apple}/{banana}")
                            public String test(
                                @PathVariable("apple") String a,
                                @PathVariable("banana") String b
                            )
                            // a에 저장된 값 == "영주"
                            // b에 저장된 값 == "하와이"


                    [추가 내용]
                        -요청 주소에 정규 표현식을 사용해서 
                        요청 주소를 제한할 수 있다!!!
                    ex) @GetMapping("{boardCode:[0-9]+}")
                        // boardCode 자리ㅔ 숫자로만 된 주소만 매핑함





